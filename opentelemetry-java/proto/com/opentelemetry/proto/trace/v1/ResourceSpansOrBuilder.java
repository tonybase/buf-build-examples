// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/trace/v1/trace.proto

package com.opentelemetry.proto.trace.v1;

public interface ResourceSpansOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opentelemetry.proto.trace.v1.ResourceSpans)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The resource for the spans in this message.
   * If this field is not set then no resource info is known.
   * </pre>
   *
   * <code>.opentelemetry.proto.resource.v1.Resource resource = 1 [json_name = "resource"];</code>
   * @return Whether the resource field is set.
   */
  boolean hasResource();
  /**
   * <pre>
   * The resource for the spans in this message.
   * If this field is not set then no resource info is known.
   * </pre>
   *
   * <code>.opentelemetry.proto.resource.v1.Resource resource = 1 [json_name = "resource"];</code>
   * @return The resource.
   */
  com.opentelemetry.proto.resource.v1.Resource getResource();
  /**
   * <pre>
   * The resource for the spans in this message.
   * If this field is not set then no resource info is known.
   * </pre>
   *
   * <code>.opentelemetry.proto.resource.v1.Resource resource = 1 [json_name = "resource"];</code>
   */
  com.opentelemetry.proto.resource.v1.ResourceOrBuilder getResourceOrBuilder();

  /**
   * <pre>
   * A list of ScopeSpans that originate from a resource.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2 [json_name = "scopeSpans"];</code>
   */
  java.util.List<com.opentelemetry.proto.trace.v1.ScopeSpans> 
      getScopeSpansList();
  /**
   * <pre>
   * A list of ScopeSpans that originate from a resource.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2 [json_name = "scopeSpans"];</code>
   */
  com.opentelemetry.proto.trace.v1.ScopeSpans getScopeSpans(int index);
  /**
   * <pre>
   * A list of ScopeSpans that originate from a resource.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2 [json_name = "scopeSpans"];</code>
   */
  int getScopeSpansCount();
  /**
   * <pre>
   * A list of ScopeSpans that originate from a resource.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2 [json_name = "scopeSpans"];</code>
   */
  java.util.List<? extends com.opentelemetry.proto.trace.v1.ScopeSpansOrBuilder> 
      getScopeSpansOrBuilderList();
  /**
   * <pre>
   * A list of ScopeSpans that originate from a resource.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.ScopeSpans scope_spans = 2 [json_name = "scopeSpans"];</code>
   */
  com.opentelemetry.proto.trace.v1.ScopeSpansOrBuilder getScopeSpansOrBuilder(
      int index);

  /**
   * <pre>
   * A list of InstrumentationLibrarySpans that originate from a resource.
   * This field is deprecated and will be removed after grace period expires on June 15, 2022.
   * During the grace period the following rules SHOULD be followed:
   * For Binary Protobufs
   * ====================
   * Binary Protobuf senders SHOULD NOT set instrumentation_library_spans. Instead
   * scope_spans SHOULD be set.
   * Binary Protobuf receivers SHOULD check if instrumentation_library_spans is set
   * and scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans SHOULD be ignored.
   * For JSON
   * ========
   * JSON senders that set instrumentation_library_spans field MAY also set
   * scope_spans to carry the same spans, essentially double-publishing the same data.
   * Such double-publishing MAY be controlled by a user-settable option.
   * If double-publishing is not used then the senders SHOULD set scope_spans and
   * SHOULD NOT set instrumentation_library_spans.
   * JSON receivers SHOULD check if instrumentation_library_spans is set and
   * scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans field SHOULD be ignored.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 1000 [json_name = "instrumentationLibrarySpans", deprecated = true];</code>
   */
  @java.lang.Deprecated java.util.List<com.opentelemetry.proto.trace.v1.InstrumentationLibrarySpans> 
      getInstrumentationLibrarySpansList();
  /**
   * <pre>
   * A list of InstrumentationLibrarySpans that originate from a resource.
   * This field is deprecated and will be removed after grace period expires on June 15, 2022.
   * During the grace period the following rules SHOULD be followed:
   * For Binary Protobufs
   * ====================
   * Binary Protobuf senders SHOULD NOT set instrumentation_library_spans. Instead
   * scope_spans SHOULD be set.
   * Binary Protobuf receivers SHOULD check if instrumentation_library_spans is set
   * and scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans SHOULD be ignored.
   * For JSON
   * ========
   * JSON senders that set instrumentation_library_spans field MAY also set
   * scope_spans to carry the same spans, essentially double-publishing the same data.
   * Such double-publishing MAY be controlled by a user-settable option.
   * If double-publishing is not used then the senders SHOULD set scope_spans and
   * SHOULD NOT set instrumentation_library_spans.
   * JSON receivers SHOULD check if instrumentation_library_spans is set and
   * scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans field SHOULD be ignored.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 1000 [json_name = "instrumentationLibrarySpans", deprecated = true];</code>
   */
  @java.lang.Deprecated com.opentelemetry.proto.trace.v1.InstrumentationLibrarySpans getInstrumentationLibrarySpans(int index);
  /**
   * <pre>
   * A list of InstrumentationLibrarySpans that originate from a resource.
   * This field is deprecated and will be removed after grace period expires on June 15, 2022.
   * During the grace period the following rules SHOULD be followed:
   * For Binary Protobufs
   * ====================
   * Binary Protobuf senders SHOULD NOT set instrumentation_library_spans. Instead
   * scope_spans SHOULD be set.
   * Binary Protobuf receivers SHOULD check if instrumentation_library_spans is set
   * and scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans SHOULD be ignored.
   * For JSON
   * ========
   * JSON senders that set instrumentation_library_spans field MAY also set
   * scope_spans to carry the same spans, essentially double-publishing the same data.
   * Such double-publishing MAY be controlled by a user-settable option.
   * If double-publishing is not used then the senders SHOULD set scope_spans and
   * SHOULD NOT set instrumentation_library_spans.
   * JSON receivers SHOULD check if instrumentation_library_spans is set and
   * scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans field SHOULD be ignored.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 1000 [json_name = "instrumentationLibrarySpans", deprecated = true];</code>
   */
  @java.lang.Deprecated int getInstrumentationLibrarySpansCount();
  /**
   * <pre>
   * A list of InstrumentationLibrarySpans that originate from a resource.
   * This field is deprecated and will be removed after grace period expires on June 15, 2022.
   * During the grace period the following rules SHOULD be followed:
   * For Binary Protobufs
   * ====================
   * Binary Protobuf senders SHOULD NOT set instrumentation_library_spans. Instead
   * scope_spans SHOULD be set.
   * Binary Protobuf receivers SHOULD check if instrumentation_library_spans is set
   * and scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans SHOULD be ignored.
   * For JSON
   * ========
   * JSON senders that set instrumentation_library_spans field MAY also set
   * scope_spans to carry the same spans, essentially double-publishing the same data.
   * Such double-publishing MAY be controlled by a user-settable option.
   * If double-publishing is not used then the senders SHOULD set scope_spans and
   * SHOULD NOT set instrumentation_library_spans.
   * JSON receivers SHOULD check if instrumentation_library_spans is set and
   * scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans field SHOULD be ignored.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 1000 [json_name = "instrumentationLibrarySpans", deprecated = true];</code>
   */
  @java.lang.Deprecated java.util.List<? extends com.opentelemetry.proto.trace.v1.InstrumentationLibrarySpansOrBuilder> 
      getInstrumentationLibrarySpansOrBuilderList();
  /**
   * <pre>
   * A list of InstrumentationLibrarySpans that originate from a resource.
   * This field is deprecated and will be removed after grace period expires on June 15, 2022.
   * During the grace period the following rules SHOULD be followed:
   * For Binary Protobufs
   * ====================
   * Binary Protobuf senders SHOULD NOT set instrumentation_library_spans. Instead
   * scope_spans SHOULD be set.
   * Binary Protobuf receivers SHOULD check if instrumentation_library_spans is set
   * and scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans SHOULD be ignored.
   * For JSON
   * ========
   * JSON senders that set instrumentation_library_spans field MAY also set
   * scope_spans to carry the same spans, essentially double-publishing the same data.
   * Such double-publishing MAY be controlled by a user-settable option.
   * If double-publishing is not used then the senders SHOULD set scope_spans and
   * SHOULD NOT set instrumentation_library_spans.
   * JSON receivers SHOULD check if instrumentation_library_spans is set and
   * scope_spans is not set then the value in instrumentation_library_spans
   * SHOULD be used instead by converting InstrumentationLibrarySpans into ScopeSpans.
   * If scope_spans is set then instrumentation_library_spans field SHOULD be ignored.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 1000 [json_name = "instrumentationLibrarySpans", deprecated = true];</code>
   */
  @java.lang.Deprecated com.opentelemetry.proto.trace.v1.InstrumentationLibrarySpansOrBuilder getInstrumentationLibrarySpansOrBuilder(
      int index);

  /**
   * <pre>
   * This schema_url applies to the data in the "resource" field. It does not apply
   * to the data in the "scope_spans" field which have their own schema_url field.
   * </pre>
   *
   * <code>string schema_url = 3 [json_name = "schemaUrl"];</code>
   * @return The schemaUrl.
   */
  java.lang.String getSchemaUrl();
  /**
   * <pre>
   * This schema_url applies to the data in the "resource" field. It does not apply
   * to the data in the "scope_spans" field which have their own schema_url field.
   * </pre>
   *
   * <code>string schema_url = 3 [json_name = "schemaUrl"];</code>
   * @return The bytes for schemaUrl.
   */
  com.google.protobuf.ByteString
      getSchemaUrlBytes();
}
